1. Індекси у базах даних (БД) використовуються для швидкого доступу до даних та покращення продуктивності запитів. Вони дозволяють базі даних швидко знаходити та вибирати певні записи, замість сканування всієї таблиці.

Індекси функціонують наступним чином:

Створення індексу: Коли ви створюєте індекс у таблиці, база даних створює структуру даних, яка містить впорядковану копію значень певного стовпця (або декількох стовпців) з таблиці. Цей впорядкований список значень відомий як дерево пошуку (B-tree) або інша структура даних.

Пошук значень: Коли ви виконуєте запит, який містить умову пошуку за певним стовпцем, база даних може використовувати індекс для швидкого пошуку потрібних записів. Замість сканування всієї таблиці, база даних може швидко знайти потрібні значення в індексі та повернути відповідні записи.

Покращення продуктивності: Використання індексів дозволяє значно зменшити час виконання запитів, особливо при роботі з великими таблицями. База даних може ефективно використовувати індекси для швидкого виконання запитів на вибірку даних, сортування, об'єднання та інші операції.

2.  В MySQL доступні наступні типи JOIN:

INNER JOIN: Повертає тільки ті рядки, які мають збіги в обох таблицях.

LEFT JOIN: Повертає всі рядки з лівої таблиці і збігаючіся рядки з правої таблиці. Якщо збігів немає, значення для правої таблиці будуть NULL.

RIGHT JOIN: Повертає всі рядки з правої таблиці і збігаючіся рядки з лівої таблиці. Якщо збігів немає, значення для лівої таблиці будуть NULL.

FULL JOIN: Повертає всі рядки з обох таблиць. Якщо збігів немає, значення для незбігаючихся рядків будуть NULL.

CROSS JOIN: Повертає декартовий добуток рядків з обох таблиць, тобто кожен рядок з першої таблиці з'єднується з кожним рядком з другої таблиці.

3. Dependency Inversion (DI) - це принцип проектування програмного забезпечення, який вказує на те, що високорівневі модулі не повинні залежати від низькорівневих модулів. Замість цього, обидва рівні модулів повинні залежати від абстракцій. Це досягається шляхом використання інверсії залежностей, де високорівневі модулі залежать від абстракцій, а низькорівневі модулі реалізують ці абстракції.

4. GET та POST - це два основних методи HTTP-запитів:

GET використовується для запиту ресурсу з сервера та передачі даних через URL. Дані GET-запиту можуть бути видимими в URL-адресі та обмежені за розміром. GET-запити повинні бути ідемпотентними, тобто повторне виконання GET-запиту не має небажаних ефектів.

POST використовується для відправки даних на сервер у тілі запиту. Дані POST-запиту не видимі в URL-адресі та можуть бути великими за розміром. POST-запити не є ідемпотентними, тобто повторне виконання POST-запиту може мати вплив на сервер (створення нового ресурсу, оновлення даних і т.д.).

Отже, основна різниця між GET та POST полягає в тому, як дані передаються: GET - через URL, POST - у тілі запиту. GET-запити використовуються для отримання даних, а POST-запити - для надсилання даних на сервер.

5. self та static - це ключові слова, які використовуються в об'єктно-орієнтованому програмуванні:

self використовується для посилання на поточний об'єкт, метод або властивість в класі. Воно представляє екземпляр класу, на якому викликається метод або звертається до властивості.

static використовується для оголошення статичних методів або властивостей в класі. Статичні методи належать до класу, а не до конкретного екземпляра класу, тому вони можуть бути викликані без створення екземпляра класу. Статичні властивості також належать до класу і спільні для всіх екземплярів класу.

Отже, основна різниця полягає в тому, що self використовується для роботи з поточним екземпляром класу, тоді як static використовується для оголошення статичних методів або властивостей, які належать до самого класу, а не до його екземплярів.

6. MVP (Model-View-Presenter) та MVC (Model-View-Controller) - це дві архітектурні парадигми, що використовуються в розробці програмного забезпечення:

MVP розділяє систему на три компоненти: Модель (Model), Представлення (View) і Презентер (Presenter). Презентер взаємодіє з Моделлю та Представленням, контролюючи потік даних та взаємодію між ними. В MVP Презентер має активну роль і відповідає за обробку подій від користувача та оновлення Моделі та Представлення.

MVC також розділяє систему на три компоненти: Модель (Model), Представлення (View) і Контролер (Controller). Контролер приймає вхідні події від користувача та взаємодіє з Моделлю та Представленням для виконання потрібних дій. В MVC Контролер відповідає за обробку вхідних подій та взаємодію з Моделлю та Представленням.

Отже, основна різниця полягає в тому, що MVP використовує Презентер, який виступає як посередник між Моделлю та Представленням, тоді як у MVC використовується Контролер, який обробляє вхідні події та взаємодіє з Моделлю та Представленням.

7. В PHP різниця між "==" (оператор рівності) та "===" (оператор строгого рівняння) полягає в такому:

"==" виконує рівність порівнюваних значень з автоматичним приведенням типів, якщо це необхідно. Наприклад, "1" == 1 буде повертати true, оскільки PHP автоматично приведе рядкове значення "1" до числового значення 1 перед порівнянням.

"===" порівнює значення і типи операндів без автоматичного приведення типів. Щоб повернути true, обидва операнди повинні мати однаковий тип і однакове значення. Наприклад, "1" === 1 буде повертати false, оскільки тип рядкового значення "1" не співпадає з числовим типом 1.

Отже, використовуючи "==" в PHP, ви можете отримати результати порівняння з автоматичним приведенням типів, тоді як "===" порівнює значення і типи без автоматичного приведення типів.

8. У PHP ключове слово final використовується для обмеження можливості успадкування або перевизначення класів та методів:

final class вказує, що клас не може бути успадкований. Жоден інший клас не може бути підкласом від final class. Це корисно, коли ви хочете заборонити будь-які зміни або додаткову спеціалізацію для даного класу.

final method вказує, що метод не може бути перевизначений у підкласах. При використанні final перед методом, ви забороняєте будь-яке подальше перевизначення цього методу у підкласах. Це корисно, коли ви хочете заборонити зміну логіки або вплив на поведінку цього методу у успадкованих класах.

Використання final class та final method дозволяє вам контролювати структуру та поведінку вашого коду, забезпечуючи необхідну стійкість і незмінність в окремих компонентах програми.

8. Я працював з наступними фрейворками Laravel, Symfony, React, Vue.js.

9. Я володію широким спектром знань і досвідом у різних технологіях, зокрема PHP, React, Vue.js та Laravel. Ось кілька ключових пунктів, які можуть відповідати вашим вимогам:

PHP: Я маю розгорнутий досвід роботи з PHP та глибоке розуміння його синтаксису та основних концепцій. Володію навичками розробки веб-додатків, роботи з базами даних та використання ООП. Також знаю популярні фреймворки, такі як Laravel.

React: Я маю досвід роботи з бібліотекою React, що дозволяє створювати динамічні та ефективні інтерфейси користувача. Знаю основні концепції, такі як компоненти, стан, події та життєвий цикл. Готовий використовувати React для створення інноваційних інтерфейсів користувача.

Laravel: Я маю досвід роботи з фреймворком Laravel, який є одним з найпопулярніших PHP-фреймворків для розробки веб-додатків. Володію навичками роботи з маршрутизацією, Модель-Вид-Контролер (MVC), роботою з базами даних та автентифікацією. Готовий використовувати Laravel для розробки потужних та масштабованих веб-додатків.












